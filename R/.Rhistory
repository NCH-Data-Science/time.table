# set working directory
setwd("~/Research_CIFS/RISIDataScience/SpecialPermissions/RISIDataScience_RBCTransfusion/Phase 1/Data/Translate Data/3-2-21")
install.packages("epiR")
library(epiR)
epi.sscc(N = NA, OR, p1 = NA, p0, n=120, power=.8, r = 1,
phi.coef = 0, design = 1, sided.test = 2, nfractional = FALSE,
conf.level = 0.95, method = "unmatched", fleiss = FALSE)
library(epiR)
epi.sscc( OR=1/2, p1 =.30, n=120, power=.8, r = 1,
phi.coef = 0, design = 1, sided.test = 2, nfractional = FALSE,
conf.level = 0.95, method = "unmatched", fleiss = FALSE)
epi.sscc(p1 =.30, n=120, power=.8, r = 1,
phi.coef = 0, design = 1, sided.test = 2, nfractional = FALSE,
conf.level = 0.95, method = "unmatched", fleiss = FALSE)
epi.sscc(p1 =.30, p0=.7, n=120, power=.8, r = 1,
phi.coef = 0, design = 1, sided.test = 2, nfractional = FALSE,
conf.level = 0.95, method = "unmatched", fleiss = FALSE)
epi.sscc(N=10000,p1 =.30, p0=.7, n=120, power=.8, r = 1,
phi.coef = 0, design = 1, sided.test = 2, nfractional = FALSE,
conf.level = 0.95, method = "unmatched", fleiss = FALSE)
epi.sscc(N=10000, OR=NA,p1 =.30, p0=.7, n=120, power=.8, r = 1,
phi.coef = 0, design = 1, sided.test = 2, nfractional = FALSE,
conf.level = 0.95, method = "unmatched", fleiss = FALSE)
epi.sscc(OR=NA,p1 =.30, p0=.7, n=120, power=.8, r = 1,
phi.coef = 0, design = 1, sided.test = 2, nfractional = FALSE,
conf.level = 0.95, method = "unmatched", fleiss = FALSE)
?epi.sscc
epi.sscc(OR=NA,p1 =.30,n=120, power=.8, r = 1,
phi.coef = 0, design = 1, sided.test = 2, nfractional = FALSE,
conf.level = 0.95, method = "unmatched", fleiss = FALSE)
epi.sscc(OR=NA,p1 =.30, p0=.3, n=120, power=.8, r = 1,
phi.coef = 0, design = 1, sided.test = 2, nfractional = FALSE,
conf.level = 0.95, method = "unmatched", fleiss = FALSE)
epi.sscc(OR=NA,p1 =1, p0=.3, n=120, power=.8, r = 1,
phi.coef = 0, design = 1, sided.test = 2,
conf.level = 0.95, method = "unmatched", fleiss = FALSE)
epi.sscc(N=10000,OR=NA,p1 =1, p0=.3, n=120, power=.8, r = 1,
phi.coef = 0, design = 1, sided.test = 2,
conf.level = 0.95, method = "unmatched", fleiss = FALSE)
epi.sscc(1,OR=NA,p1 =1, p0=.3, n=120, power=.5, r = 1,
phi.coef = 0, design = 1, sided.test = 2,
conf.level = 0.95, method = "unmatched", fleiss = FALSE)
8
epi.sscc(1,OR=NA,p1 =1, p0=.3, n=120, power=.8, r = 1,
phi.coef = 0, design = 2, sided.test = 2,
conf.level = 0.95, method = "unmatched", fleiss = FALSE)
epi.sscc(1,OR=NA,p1 =1, p0=.3, n=120, power=.8, r = 1,
phi.coef = 0, design = 3, sided.test = 2,
conf.level = 0.95, method = "unmatched", fleiss = FALSE)
epi.sscc(1,OR=NA,p1 =1, p0=.3, n=120, power=.8, r = 1,
phi.coef = 0, design = 2, sided.test = 2,
conf.level = 0.95, method = "unmatched", fleiss = FALSE)
library(shiny); runApp('Documents/app for dustin 2.R')
?ceiling_date
?get
asdf <- 2
get("asdf")
get("asdf")
?cumsum
?seq
?lubridate
period(10)
lubridate::period(10)
lubridate::period('10 min')
lubridate::period('10 minutes')
out=lubridate::period('10 minutes')
lubridate::period('1 hour')
temp=lubridate::period('1 hour')
temp/out
100/lubridate::period('10 minutes')
period(0)/lubridate::period('10 minutes')
lubridate::period(0)/lubridate::period('10 minutes')
document()
library(devtools)
document()
getwd()
rlang::last_error()
setwd("~/Documents/GitHub/r_package_dev/Time.Table/R")
document()
document()
load_all()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(data.table)
library(table.express)
library(devtools)
load_all()
df_admit_discharge = data.frame(patient_id=paste0("pat_",1:2),
admit=c(as.POSIXct("2012-03-12 12:12:12"),
as.POSIXct("2012-03-13 11:11:11")),
discharge=c(as.POSIXct("2012-3-20 12:12:12"),
as.POSIXct("2012-03-20 10:10:10")))
head(df_admit_discharge)
TimeTableTempl = Time.Table::GetTime.TableTemplate(start_times = df_admit_discharge$admit,
end_times = df_admit_discharge$discharge,
IDs = df_admit_discharge$patient_id,
sample_interval= "60 min" # grid point at every 60th minute
)
# library(Time.Table)
library(data.table)
library(table.express)
library(devtools)
load_all()
df_admit_discharge = data.frame(patient_id=paste0("pat_",1:2),
admit=c(as.POSIXct("2012-03-12 12:12:12"),
as.POSIXct("2012-03-13 11:11:11")),
discharge=c(as.POSIXct("2012-3-20 12:12:12"),
as.POSIXct("2012-03-20 10:10:10")))
head(df_admit_discharge)
TimeTableTempl = Time.Table::GetTime.TableTemplate(start_times = df_admit_discharge$admit,
end_times = df_admit_discharge$discharge,
IDs = df_admit_discharge$patient_id,
sample_interval= "60 min" # grid point at every 60th minute
)
head(TimeTableTempl)
# patient 1
times_pat_1 = seq(as.POSIXct("2012-03-12 12:12:12"),
as.POSIXct("2012-03-20 20:20:20"),
by="5 hours") # patient 1 has their heart rate measured every 5 hours
values_pat_1 = rnorm(length(times_pat_1),80,20)
ID_pat_1 = rep("pat_1",length(times_pat_1))
# patient 2
times_pat_2 = seq(as.POSIXct("2012-03-13 11:11:11"),
as.POSIXct("2012-03-20 10:10:10"),
by="4 hours") # patient 2 has their heart rate measured every 4 hours
values_pat_2 = rnorm(length(times_pat_2),70,10)
ID_pat_2 = rep("pat_2",length(times_pat_2))
# let's store consolidate these into a data.frame
df_heartrate = data.frame(IDs = c(ID_pat_1,ID_pat_2),
heart_rate = c(values_pat_1,values_pat_2),
times = c(times_pat_1,times_pat_2))
head(df_heartrate)
heart_rate_tt = Time.Table::PutOnTime.Table(values = df_heartrate$heart_rate,
datetimes = df_heartrate$times,
IDs = df_heartrate$IDs,
var_name = "heart_rate",
Template = TimeTableTempl, # pass template from section one
sample_interval = "60 min",
aggregration_type = "mean", #how to handle multiple measurements for same time point
duration_hr = 2 # assume measures are carried forward 2 hours if no new measurement
)
heart_rate_tt = Time.Table::PutOnTime.Table(values = df_heartrate$heart_rate,
datetimes = df_heartrate$times,
IDs = df_heartrate$IDs,
var_name = "heart_rate",
Template = TimeTableTempl, # pass template from section one
sample_interval = "60 min",
aggregration_type = "mean", #how to handle multiple measurements for same time point
duration  = "2 hours"# assume measures are carried forward 2 hours if no new measurement
)
head(heart_rate_tt)
# patient 1
times_pat_1 = as.POSIXct("2012-03-12 12:12:12")
values_pat_1 = "male"
ID_pat_1 = rep("pat_1",length(values_pat_1))
# patient 2
times_pat_2 = as.POSIXct("2012-03-13 11:11:11")
values_pat_2 = "female"
ID_pat_2 = rep("pat_2",length(values_pat_2))
# let's store consolidate these into a data.frame
df_sex = data.frame(IDs=c(ID_pat_1,ID_pat_2),
value=c(values_pat_1,values_pat_2),
datetimes=c(times_pat_1,times_pat_2))
head(df_sex)
sex_tt = PutOnTime.Table(values = df_sex$value,
datetimes = df_sex$datetimes,
IDs = df_sex$IDs,
var_name = "sex",
Template = TimeTableTempl, # pass template from section one
sample_interval_minute = "60 min",
aggregration_type = "latest", # how to handle multiple measurements for same time point
duration = NA # a measure doesn't expire here since it's static
# both 'NA' or 'Inf' would work here.
)
sex_tt = PutOnTime.Table(values = df_sex$value,
datetimes = df_sex$datetimes,
IDs = df_sex$IDs,
var_name = "sex",
Template = TimeTableTempl, # pass template from section one
sample_interval = "60 min",
aggregration_type = "latest", # how to handle multiple measurements for same time point
duration = NA # a measure doesn't expire here since it's static
# both 'NA' or 'Inf' would work here.
)
# patient 1
times_pat_1 = as.POSIXct("2012-03-12 12:12:12")
values_pat_1 = "male"
ID_pat_1 = rep("pat_1",length(values_pat_1))
# patient 2
times_pat_2 = as.POSIXct("2012-03-13 11:11:11")
values_pat_2 = "female"
ID_pat_2 = rep("pat_2",length(values_pat_2))
# let's store consolidate these into a data.frame
df_sex = data.frame(IDs=c(ID_pat_1,ID_pat_2),
value=c(values_pat_1,values_pat_2),
datetimes=c(times_pat_1,times_pat_2))
head(df_sex)
sex_tt = PutOnTime.Table(values = df_sex$value,
datetimes = df_sex$datetimes,
IDs = df_sex$IDs,
var_name = "sex",
Template = TimeTableTempl, # pass template from section one
sample_interval = "60 min",
aggregration_type = "latest", # how to handle multiple measurements for same time point
duration = NA # a measure doesn't expire here since it's static
# both 'NA' or 'Inf' would work here.
)
head(sex_tt)
tt = CombineTime.Tables(c("sex_tt","heart_rate_tt"),
join_type='cbind')
head(tt)
CombineTime.Tables(c("sex_tt","heart_rate_tt"),
join_type='right_join')
document()
document()
check()
check()
?setorder
?`:::`
check()
check()
check()
check()
document()
check()
document()
check()
check()
document()
check()
document()
check()
?split.data.table
check()
?split
check()
check()
check()
check()
check()
check()
check()
check()
library(table.express)
library(time.table)
df_admit_discharge = data.frame(patient_id=paste0("pat_",1:2),
admit=c(as.POSIXct("2012-03-12 12:12:12"),
as.POSIXct("2012-03-13 11:11:11")),
discharge=c(as.POSIXct("2012-3-20 12:12:12"),
as.POSIXct("2012-03-20 10:10:10")))
head(df_admit_discharge)
library(data.table)
library(table.express)
library(time.table)
df_admit_discharge = data.frame(patient_id=paste0("pat_",1:2),
admit=c(as.POSIXct("2012-03-12 12:12:12"),
as.POSIXct("2012-03-13 11:11:11")),
discharge=c(as.POSIXct("2012-3-20 12:12:12"),
as.POSIXct("2012-03-20 10:10:10")))
head(df_admit_discharge)
TimeTableTempl = time.table::GetTimeTableTemplate(start_times = df_admit_discharge$admit,
end_times = df_admit_discharge$discharge,
IDs = df_admit_discharge$patient_id,
sample_interval= "60 min" # grid point at every 60th minute
)
head(TimeTableTempl)
# patient 1
times_pat_1 = seq(as.POSIXct("2012-03-12 12:12:12"),
as.POSIXct("2012-03-20 20:20:20"),
by="5 hours") # patient 1 has their heart rate measured every 5 hours
values_pat_1 = rnorm(length(times_pat_1),80,20)
ID_pat_1 = rep("pat_1",length(times_pat_1))
# patient 2
times_pat_2 = seq(as.POSIXct("2012-03-13 11:11:11"),
as.POSIXct("2012-03-20 10:10:10"),
by="4 hours") # patient 2 has their heart rate measured every 4 hours
values_pat_2 = rnorm(length(times_pat_2),70,10)
ID_pat_2 = rep("pat_2",length(times_pat_2))
# let's store consolidate these into a data.frame
df_heartrate = data.frame(IDs = c(ID_pat_1,ID_pat_2),
heart_rate = c(values_pat_1,values_pat_2),
times = c(times_pat_1,times_pat_2))
head(df_heartrate)
heart_rate_tt = time.table::PutOnTimeTable(value = df_heartrate$heart_rate,
datetimes = df_heartrate$times,
IDs = df_heartrate$IDs,
var_name = "heart_rate",
Template = TimeTableTempl, # pass template from section one
sample_interval = "60 min",
aggregration_type = "mean", #how to handle multiple measurements for same time point
duration  = "2 hours"# assume measures are carried forward 2 hours if no new measurement
)
head(heart_rate_tt)
TimeTableTempl = time.table::GetTimeTableTemplate(start_times = df_admit_discharge$admit,
end_times = df_admit_discharge$discharge,
IDs = df_admit_discharge$patient_id,
sample_interval= "60 min" # grid point at every 60th minute
)
head(TimeTableTempl)
# patient 1
times_pat_1 = seq(as.POSIXct("2012-03-12 12:12:12"),
as.POSIXct("2012-03-20 20:20:20"),
by="5 hours") # patient 1 has their heart rate measured every 5 hours
values_pat_1 = rnorm(length(times_pat_1),80,20)
ID_pat_1 = rep("pat_1",length(times_pat_1))
# patient 2
times_pat_2 = seq(as.POSIXct("2012-03-13 11:11:11"),
as.POSIXct("2012-03-20 10:10:10"),
by="4 hours") # patient 2 has their heart rate measured every 4 hours
values_pat_2 = rnorm(length(times_pat_2),70,10)
ID_pat_2 = rep("pat_2",length(times_pat_2))
IDs = c(ID_pat_1,ID_pat_2)
# let's store consolidate these into a data.frame
df_heartrate = data.frame(IDs = c(ID_pat_1,ID_pat_2),
heart_rate = c(values_pat_1,values_pat_2),
times = c(times_pat_1,times_pat_2))
head(df_heartrate)
value = df_heartrate$heart_rate
datetimes = df_heartrate$times
IDs = df_heartrate$IDs
var_name = "heart_rate"
Template = TimeTableTempl
"60 min"
aggregration_type = "mean"
duration  = "2 hours"
duration
duration
is.period('2 hours')
lubridate::is.period('2 hours')
lubridate::is.period(period('2 hours'))
lubridate::is.period(lubridate::period('2 hours'))
lubridate::is.period(lubridate::period('NA'))
lubridate::is.period(lubridate::period('NA'))
(lubridate::period('NA'))
?period
period("2 hours")
lubridate::period("2 hours")
lubridate::period("2 hours")
lubridate::period("2 hours")
lubridate::period("2 hours")
document(
)
check()
check()
check()
check()
library(devtools)
usethis::pack
usethis::use_version('minor')
usethis::use_version('minor')
usethis::use_version('minor')
?install_bitbucket
install_bitbucket("https://rpw-bitbucket01.crii.org/users/bmg011/repos/time.table")
devtools::install_github("bmgaldo/time.table")
?time.table
library(time.table)
?time.table
?PutOnTimeTable
use_readme_rmd()
use_this::version()
version()
library(devtools)
version()
use_version()
?rapply
rollapply
qlogis(1)
qlogis(.5)
runApp('~/Documents/app for dustin 2.R')
runApp('~/Documents/app for dustin 2.R')
runApp('~/Documents/app for dustin 2.R')
# set working directory
setwd("~/Research_CIFS/RISIDataScience/SpecialPermissions/RISIDataScience_RBCTransfusion/Data/Translate Data/3-2-21")
?shift
?lhs.design
?Filter
install.packages("sem")
?sem_model
library(sem)
library(DoE.wrapper)
install.packages("sem")
?sim.structure
library(sem)
library(DoE.wrapper)
library(Matrix)
library(matrixcalc)
library(easyr)
library(caret)
library(dplyr)
library(psych)
library(mice)
library(sjmisc)
?sim.structure
?sem_model
library(sem)
library(DoE.wrapper)
library(Matrix)
library(matrixcalc)
library(easyr)
library(caret)
library(dplyr)
library(psych)
library(mice)
library(sjmisc)
?sem_model
?stack
?multi_diff
